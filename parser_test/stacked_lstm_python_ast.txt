("Module(body=[FunctionDef(name='forward', "
 "args=arguments(args=[arg(arg='self', annotation=None), arg(arg='input_seq', "
 "annotation=Subscript(value=Name(id='List', ctx=Load()), "
 "slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), "
 "slice=Index(value=Name(id='Tensor', ctx=Load())), ctx=Load())), "
 "ctx=Load())), arg(arg='lens', annotation=Subscript(value=Name(id='List', "
 "ctx=Load()), slice=Index(value=Name(id='int', ctx=Load())), ctx=Load())), "
 "arg(arg='batch_size', annotation=Name(id='int', ctx=Load())), "
 "arg(arg='depth', annotation=Name(id='int', ctx=Load()))], vararg=None, "
 'kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), '
 "body=[Expr(value=Str(s='\\n        Argument 1 and Argument 2 are read-only "
 'input arrays.\\n\\n        To make a program description independent of the '
 'size of data,\\n        parameters 3 to 5 are introduced which stand for '
 "possible size.\\n        ')), AnnAssign(target=Name(id='output_i', "
 "ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), "
 "slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), "
 "slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), "
 "slice=Index(value=Name(id='Tensor', ctx=Load())), ctx=Load())), "
 'ctx=Load())), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), '
 "For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', "
 "ctx=Load()), args=[Name(id='batch_size', ctx=Load())], keywords=[]), "
 "body=[AnnAssign(target=Name(id='output_j', ctx=Store()), "
 "annotation=Subscript(value=Name(id='List', ctx=Load()), "
 "slice=Index(value=Subscript(value=Name(id='List', ctx=Load()), "
 "slice=Index(value=Name(id='Tensor', ctx=Load())), ctx=Load())), ctx=Load()), "
 'value=List(elts=[], ctx=Load()), simple=1), '
 "For(target=Tuple(elts=[Name(id='d', ctx=Store()), Name(id='cell', "
 "ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', "
 "ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), "
 "attr='cells', ctx=Load())], keywords=[]), "
 "body=[AnnAssign(target=Name(id='output_k', ctx=Store()), "
 "annotation=Subscript(value=Name(id='List', ctx=Load()), "
 "slice=Index(value=Name(id='Tensor', ctx=Load())), ctx=Load()), "
 "value=List(elts=[], ctx=Load()), simple=1), For(target=Name(id='t', "
 "ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), "
 "args=[Subscript(value=Name(id='lens', ctx=Load()), "
 "slice=Index(value=Name(id='i', ctx=Load())), ctx=Load())], keywords=[]), "
 "body=[If(test=Compare(left=Name(id='d', ctx=Load()), ops=[Eq()], "
 "comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='x', ctx=Store())], "
 "value=Subscript(value=Subscript(value=Name(id='input_seq', ctx=Load()), "
 "slice=Index(value=Name(id='i', ctx=Load())), ctx=Load()), "
 "slice=Index(value=Name(id='t', ctx=Load())), ctx=Load()))], "
 "orelse=[Assign(targets=[Name(id='x', ctx=Store())], "
 "value=Subscript(value=Subscript(value=Name(id='output_j', ctx=Load()), "
 "slice=Index(value=BinOp(left=Name(id='d', ctx=Load()), op=Sub(), "
 "right=Num(n=1))), ctx=Load()), slice=Index(value=Name(id='t', ctx=Load())), "
 "ctx=Load()))]), If(test=Compare(left=Name(id='t', ctx=Load()), ops=[Eq()], "
 "comparators=[Num(n=0)]), body=[Assign(targets=[Name(id='h_prev', "
 "ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), "
 "attr='init_state', ctx=Load()))], orelse=[Assign(targets=[Name(id='h_prev', "
 "ctx=Store())], value=Subscript(value=Name(id='output_k', ctx=Load()), "
 'slice=Index(value=UnaryOp(op=USub(), operand=Num(n=1))), ctx=Load()))]), '
 "Assign(targets=[Name(id='h', ctx=Store())], value=Call(func=Name(id='cell', "
 "ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='h_prev', ctx=Load())], "
 "keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='output_k', "
 "ctx=Load()), attr='append', ctx=Load()), args=[Name(id='h', ctx=Load())], "
 'keywords=[]))], orelse=[]), '
 "Expr(value=Call(func=Attribute(value=Name(id='output_j', ctx=Load()), "
 "attr='append', ctx=Load()), args=[Name(id='output_k', ctx=Load())], "
 'keywords=[]))], orelse=[]), '
 "Expr(value=Call(func=Attribute(value=Name(id='output_i', ctx=Load()), "
 "attr='append', ctx=Load()), args=[Name(id='output_j', ctx=Load())], "
 "keywords=[]))], orelse=[]), Return(value=Name(id='output_i', ctx=Load()))], "
 'decorator_list=[], returns=None)])')

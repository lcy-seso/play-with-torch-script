start: 128
end: 405
indent: '  '
context: '[P, M, Q, N] -> {  : -2147483648 <= P <= 2147483647 and M >= 0 and -P <=
  M <= 2147483647 - P and M <= 2147483647 and 0 <= Q <= 2147483647 and 0 <= N <= 2147483647
  - Q and N <= 2147483647 }'
schedule: '{ domain: "[P, M, Q, N] -> { S_0[i] : 0 <= i < M; S_2[i, k, l] : 0 <= i
  < M and 0 <= k < P and 0 <= l < Q; S_3[]; S_6[]; S_1[i, j] : 0 <= i < M and 0 <=
  j < N; S_5[]; S_4[]; S_7[] }", child: { sequence: [ { filter: "[M, P, Q, N] -> {
  S_1[i, j]; S_0[i]; S_2[i, k, l] }", child: { schedule: "[M, P, Q, N] -> L_0[{ S_1[i,
  j] -> [(i)]; S_0[i] -> [(i)]; S_2[i, k, l] -> [(i)] }]", child: { sequence: [ {
  filter: "[M, P, Q, N] -> { S_0[i] }" }, { filter: "[M, P, Q, N] -> { S_1[i, j] }",
  child: { schedule: "[M, N] -> L_1[{ S_1[i, j] -> [(j)] }]" } }, { filter: "[M, P,
  Q, N] -> { S_2[i, k, l] }", child: { schedule: "[M, P, Q] -> L_2[{ S_2[i, k, l]
  -> [(k)] }]", child: { schedule: "[M, P, Q] -> L_3[{ S_2[i, k, l] -> [(l)] }]" }
  } } ] } } }, { filter: "[M, P, Q, N] -> { S_4[]; S_7[]; S_6[]; S_3[]; S_5[] }",
  child: { set: [ { filter: "{ S_3[] }" }, { filter: "{ S_4[] }" }, { filter: "{ S_5[]
  }" }, { filter: "{ S_6[] }" }, { filter: "{ S_7[] }" } ] } } ] } }'
arrays:
- context: '[Q, N, P, M] -> {  : -Q <= N <= 2147483647 - Q and -P <= M <= 2147483647
    - P }'
  extent: '[P, M, Q, N] -> { A[i0, i1] : 0 <= i0 < P + M and 0 <= i1 < Q + N }'
  element_type: float
  element_size: 4
- context: '[M, N] -> {  : M >= 0 and N >= 0 }'
  extent: '[P, M, Q, N] -> { B[i0, i1] : 0 <= i0 < N and 0 <= i1 < M }'
  element_type: float
  element_size: 4
- context: '[N] -> {  : N >= 0 }'
  extent: '[P, M, Q, N] -> { X[i0] : 0 <= i0 < N }'
  element_type: float
  element_size: 4
- context: '[Q] -> {  : Q >= 0 }'
  extent: '[P, M, Q, N] -> { Y[i0] : 0 <= i0 < Q }'
  element_type: float
  element_size: 4
- context: '[P, M] -> {  : -P <= M <= 2147483647 - P }'
  extent: '[P, M, Q, N] -> { Z[i0] : 0 <= i0 < P + M }'
  element_type: float
  element_size: 4
statements:
- line: 10
  domain: '[P, M, Q, N] -> { S_0[i] : 0 <= i < M }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[P, M, Q, N] -> { S_0[i] -> Z[(i)] }'
        reference: __pet_ref_0
        read: 0
        write: 1
      - type: int
        value: 0
- line: 12
  domain: '[P, M, Q, N] -> { S_1[i, j] : 0 <= i < M and 0 <= j < N }'
  body:
    type: expression
    expr:
      type: op
      operation: +=
      arguments:
      - type: access
        index: '[P, M, Q, N] -> { S_1[i, j] -> Z[(i)] }'
        reference: __pet_ref_1
        read: 1
        write: 1
      - type: op
        operation: '*'
        arguments:
        - type: op
          operation: +
          arguments:
          - type: access
            index: '[P, M, Q, N] -> { S_1[i, j] -> A[(i), (j)] }'
            reference: __pet_ref_2
            read: 1
            write: 0
          - type: access
            index: '[P, M, Q, N] -> { S_1[i, j] -> B[(j), (i)] }'
            reference: __pet_ref_3
            read: 1
            write: 0
        - type: access
          index: '[P, M, Q, N] -> { S_1[i, j] -> X[(j)] }'
          reference: __pet_ref_4
          read: 1
          write: 0
- line: 16
  domain: '[P, M, Q, N] -> { S_2[i, k, l] : 0 <= i < M and 0 <= k < P and 0 <= l <
    Q }'
  body:
    type: expression
    expr:
      type: op
      operation: +=
      arguments:
      - type: access
        index: '[P, M, Q, N] -> { S_2[i, k, l] -> Z[(k)] }'
        reference: __pet_ref_5
        read: 1
        write: 1
      - type: op
        operation: '*'
        arguments:
        - type: access
          index: '[P, M, Q, N] -> { S_2[i, k, l] -> A[(k), (l)] }'
          reference: __pet_ref_6
          read: 1
          write: 0
        - type: access
          index: '[P, M, Q, N] -> { S_2[i, k, l] -> Y[(l)] }'
          reference: __pet_ref_7
          read: 1
          write: 0
- line: -1
  domain: '[P, M, Q, N] -> { S_3[] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[P, M, Q, N] -> { S_3[] -> Z[o0] : 0 <= o0 < P + M }'
        index: '[P, M, Q, N] -> { S_3[] -> Z[] }'
        depth: 1
        reference: __pet_ref_8
        kill: 1
- line: -1
  domain: '[P, M, Q, N] -> { S_4[] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[P, M, Q, N] -> { S_4[] -> A[o0, o1] : 0 <= o0 < P + M and 0 <= o1
          < Q + N }'
        index: '[P, M, Q, N] -> { S_4[] -> A[] }'
        depth: 2
        reference: __pet_ref_9
        kill: 1
- line: -1
  domain: '[P, M, Q, N] -> { S_5[] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[P, M, Q, N] -> { S_5[] -> B[o0, o1] : 0 <= o0 < N and 0 <= o1 <
          M }'
        index: '[P, M, Q, N] -> { S_5[] -> B[] }'
        depth: 2
        reference: __pet_ref_10
        kill: 1
- line: -1
  domain: '[P, M, Q, N] -> { S_6[] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[P, M, Q, N] -> { S_6[] -> X[o0] : 0 <= o0 < N }'
        index: '[P, M, Q, N] -> { S_6[] -> X[] }'
        depth: 1
        reference: __pet_ref_11
        kill: 1
- line: -1
  domain: '[P, M, Q, N] -> { S_7[] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[P, M, Q, N] -> { S_7[] -> Y[o0] : 0 <= o0 < Q }'
        index: '[P, M, Q, N] -> { S_7[] -> Y[] }'
        depth: 1
        reference: __pet_ref_12
        kill: 1

start: 102
end: 662
indent: '  '
context: '[K, M, N] -> {  : 0 <= K <= 2147483647 and 0 <= M <= 2147483647 and 0 <=
  N <= 2147483647 }'
schedule: '{ domain: "[K, M, N] -> { S_0[i, j = 0, k = 0] : K > 0 and M > 0 and 0
  <= i < N; S_2[i, j = 0, k] : M > 0 and 0 <= i < N and 0 < k < K; S_4[]; S_3[i, j,
  k] : 0 <= i < N and 0 < j < M and 0 < k < K; S_5[]; S_1[i, j, k = 0] : K > 0 and
  0 <= i < N and 0 < j < M; S_6[] }", child: { sequence: [ { filter: "[N, M, K] ->
  { S_2[i, j, k]; S_0[i, j, k]; S_1[i, j, k]; S_3[i, j, k] }", child: { schedule:
  "[N, M, K] -> L_0[{ S_2[i, j, k] -> [(i)]; S_0[i, j, k] -> [(i)]; S_1[i, j, k] ->
  [(i)]; S_3[i, j, k] -> [(i)] }]", child: { schedule: "[N, M, K] -> L_1[{ S_2[i,
  j, k] -> [(j)]; S_0[i, j, k] -> [(j)]; S_1[i, j, k] -> [(j)]; S_3[i, j, k] -> [(j)]
  }]", child: { schedule: "[N, M, K] -> L_2[{ S_2[i, j, k] -> [(k)]; S_0[i, j, k]
  -> [(k)]; S_1[i, j, k] -> [(k)]; S_3[i, j, k] -> [(k)] }]", child: { set: [ { filter:
  "[N, M, K] -> { S_0[i, j, k] }" }, { filter: "[N, M, K] -> { S_1[i, j, k] }" },
  { filter: "[N, M, K] -> { S_2[i, j, k] }" }, { filter: "[N, M, K] -> { S_3[i, j,
  k] }" } ] } } } } }, { filter: "[N, M, K] -> { S_4[]; S_5[]; S_6[] }", child: {
  set: [ { filter: "{ S_4[] }" }, { filter: "{ S_5[] }" }, { filter: "{ S_6[] }" }
  ] } } ] } }'
arrays:
- context: '[M, N] -> {  : M >= 0 and N >= 0 }'
  extent: '[K, M, N] -> { a[i0, i1] : 0 <= i0 < N and 0 <= i1 < M }'
  element_type: int
  element_size: 4
- context: '[K, N] -> {  : K >= 0 and N >= 0 }'
  extent: '[K, M, N] -> { b[i0, i1] : 0 <= i0 < N and 0 <= i1 < K }'
  element_type: int
  element_size: 4
- context: '[K, M, N] -> {  : K >= 0 and M >= 0 and N >= 0 }'
  extent: '[K, M, N] -> { c[i0, i1, i2] : 0 <= i0 < N and 0 <= i1 < M and 0 <= i2
    < K }'
  element_type: int
  element_size: 4
statements:
- line: 11
  domain: '[K, M, N] -> { S_0[i, j = 0, k = 0] : K > 0 and M > 0 and 0 <= i < N }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[K, M, N] -> { S_0[i, j, k] -> c[(i), (0), (0)] }'
        reference: __pet_ref_0
        read: 0
        write: 1
      - type: op
        operation: +
        arguments:
        - type: access
          index: '[K, M, N] -> { S_0[i, j, k] -> a[(i), (0)] }'
          reference: __pet_ref_1
          read: 1
          write: 0
        - type: access
          index: '[K, M, N] -> { S_0[i, j, k] -> b[(i), (0)] }'
          reference: __pet_ref_2
          read: 1
          write: 0
- line: 13
  domain: '[K, M, N] -> { S_1[i, j, k = 0] : K > 0 and 0 <= i < N and 0 < j < M }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[K, M, N] -> { S_1[i, j, k] -> c[(i), (j), (0)] }'
        reference: __pet_ref_3
        read: 0
        write: 1
      - type: op
        operation: +
        arguments:
        - type: access
          index: '[K, M, N] -> { S_1[i, j, k] -> a[(i), (j)] }'
          reference: __pet_ref_4
          read: 1
          write: 0
        - type: access
          index: '[K, M, N] -> { S_1[i, j, k] -> c[(i), (-1 + j), (0)] }'
          reference: __pet_ref_5
          read: 1
          write: 0
- line: 17
  domain: '[K, M, N] -> { S_2[i, j = 0, k] : M > 0 and 0 <= i < N and 0 < k < K }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[K, M, N] -> { S_2[i, j, k] -> c[(i), (0), (k)] }'
        reference: __pet_ref_6
        read: 0
        write: 1
      - type: op
        operation: +
        arguments:
        - type: access
          index: '[K, M, N] -> { S_2[i, j, k] -> c[(i), (0), (-1 + k)] }'
          reference: __pet_ref_7
          read: 1
          write: 0
        - type: access
          index: '[K, M, N] -> { S_2[i, j, k] -> b[(i), (k)] }'
          reference: __pet_ref_8
          read: 1
          write: 0
- line: 19
  domain: '[K, M, N] -> { S_3[i, j, k] : 0 <= i < N and 0 < j < M and 0 < k < K }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[K, M, N] -> { S_3[i, j, k] -> c[(i), (j), (k)] }'
        reference: __pet_ref_9
        read: 0
        write: 1
      - type: op
        operation: +
        arguments:
        - type: access
          index: '[K, M, N] -> { S_3[i, j, k] -> c[(i), (j), (-1 + k)] }'
          reference: __pet_ref_10
          read: 1
          write: 0
        - type: access
          index: '[K, M, N] -> { S_3[i, j, k] -> c[(i), (-1 + j), (k)] }'
          reference: __pet_ref_11
          read: 1
          write: 0
- line: -1
  domain: '[K, M, N] -> { S_4[] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[K, M, N] -> { S_4[] -> a[o0, o1] : 0 <= o0 < N and 0 <= o1 < M }'
        index: '[K, M, N] -> { S_4[] -> a[] }'
        depth: 2
        reference: __pet_ref_12
        kill: 1
- line: -1
  domain: '[K, M, N] -> { S_5[] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[K, M, N] -> { S_5[] -> b[o0, o1] : 0 <= o0 < N and 0 <= o1 < K }'
        index: '[K, M, N] -> { S_5[] -> b[] }'
        depth: 2
        reference: __pet_ref_13
        kill: 1
- line: -1
  domain: '[K, M, N] -> { S_6[] }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[K, M, N] -> { S_6[] -> c[o0, o1, o2] : 0 <= o0 < N and 0 <= o1 <
          M and 0 <= o2 < K }'
        index: '[K, M, N] -> { S_6[] -> c[] }'
        depth: 3
        reference: __pet_ref_14
        kill: 1

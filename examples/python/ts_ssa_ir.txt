graph(%self : __torch__.StackedLSTM,
      %input_seq.1 : Tensor[][],
      %lens.1 : int[],
      %batch_size.1 : int,
      %depth : int):
  %9 : bool = prim::Constant[value=1]() # stacked_lstm_v2.py:38:8
  %16 : int = prim::Constant[value=0]() # stacked_lstm_v2.py:44:29
  %25 : int = prim::Constant[value=1]() # stacked_lstm_v2.py:49:27
  %144 : int = prim::Constant[value=2]() # stacked_lstm_v2.py:56:12
  %184 : int = prim::Constant[value=3]() # stacked_lstm_v2.py:56:12
  %output_i.1 : Tensor[][][] = prim::ListConstruct()
   = prim::Loop(%batch_size.1, %9) # stacked_lstm_v2.py:38:8
    block0(%i.1 : int):
      %output_j.1 : Tensor[][] = prim::ListConstruct()
      %output_depth1.1 : Tensor[] = prim::ListConstruct()
      %15 : Tensor[] = aten::__getitem__(%input_seq.1, %i.1) # stacked_lstm_v2.py:44:16
      %x.1 : Tensor = aten::__getitem__(%15, %16) # stacked_lstm_v2.py:44:16
      %18 : __torch__.utils.cells.vanilla.VanillaRNNCell = prim::GetAttr[name="cell1"](%self)
      %20 : Tensor = prim::GetAttr[name="init_state"](%self)
      %h_prev.1 : Tensor = prim::CallMethod[name="forward"](%18, %x.1, %20) # stacked_lstm_v2.py:45:21
      %24 : Tensor[] = aten::append(%output_depth1.1, %h_prev.1) # stacked_lstm_v2.py:46:12
      %28 : int = aten::__getitem__(%lens.1, %i.1) # stacked_lstm_v2.py:49:30
      %29 : int = aten::__range_length(%25, %28, %25) # stacked_lstm_v2.py:49:12
       = prim::Loop(%29, %9) # stacked_lstm_v2.py:49:12
        block0(%31 : int):
          %t.1 : int = aten::__derive_index(%31, %25, %25) # stacked_lstm_v2.py:49:12
          %35 : Tensor[] = aten::__getitem__(%input_seq.1, %i.1) # stacked_lstm_v2.py:50:20
          %x.3 : Tensor = aten::__getitem__(%35, %t.1) # stacked_lstm_v2.py:50:20
          %41 : int = aten::sub(%t.1, %25) # stacked_lstm_v2.py:51:39
          %h_prev.3 : Tensor = aten::__getitem__(%output_depth1.1, %41) # stacked_lstm_v2.py:51:25
          %44 : __torch__.utils.cells.vanilla.VanillaRNNCell = prim::GetAttr[name="cell1"](%self)
          %h.1 : Tensor = prim::CallMethod[name="forward"](%44, %x.3, %h_prev.3) # stacked_lstm_v2.py:52:20
          %50 : Tensor[] = aten::append(%output_depth1.1, %h.1) # stacked_lstm_v2.py:53:16
          -> (%9)
      %53 : Tensor[][] = aten::append(%output_j.1, %output_depth1.1) # stacked_lstm_v2.py:54:12
      %55 : __torch__.torch.nn.modules.container.ModuleList = prim::GetAttr[name="cells"](%self)
      %57 : __torch__.utils.cells.vanilla.VanillaRNNCell = prim::GetAttr[name="0"](%55)
      %59 : __torch__.utils.cells.vanilla.VanillaRNNCell = prim::GetAttr[name="1"](%55)
      %61 : __torch__.utils.cells.vanilla.VanillaRNNCell = prim::GetAttr[name="2"](%55)
      %63 : __torch__.utils.cells.vanilla.VanillaRNNCell = prim::GetAttr[name="3"](%55)
      %output_t.1 : Tensor[] = prim::ListConstruct()
      %69 : Tensor[] = aten::__getitem__(%output_j.1, %16) # stacked_lstm_v2.py:61:20
      %x.6 : Tensor = aten::__getitem__(%69, %16) # stacked_lstm_v2.py:61:20
      %72 : Tensor = prim::GetAttr[name="init_state"](%self)
      %h_prev.6 : Tensor = prim::CallMethod[name="forward"](%57, %x.6, %72) # stacked_lstm_v2.py:62:25
      %76 : Tensor[] = aten::append(%output_t.1, %h_prev.6) # stacked_lstm_v2.py:63:16
      %79 : int = aten::__getitem__(%lens.1, %i.1) # stacked_lstm_v2.py:65:34
      %80 : int = aten::__range_length(%25, %79, %25) # stacked_lstm_v2.py:65:16
       = prim::Loop(%80, %9) # stacked_lstm_v2.py:65:16
        block0(%82 : int):
          %t.4 : int = aten::__derive_index(%82, %25, %25) # stacked_lstm_v2.py:65:16
          %277 : int = prim::Constant[value=-1]()
          %87 : Tensor[] = aten::__getitem__(%output_j.1, %277) # stacked_lstm_v2.py:66:24
          %x.8 : Tensor = aten::__getitem__(%87, %t.4) # stacked_lstm_v2.py:66:24
          %93 : int = aten::sub(%t.4, %25) # stacked_lstm_v2.py:67:38
          %h_prev.8 : Tensor = aten::__getitem__(%output_t.1, %93) # stacked_lstm_v2.py:67:29
          %h.3 : Tensor = prim::CallMethod[name="forward"](%57, %x.8, %h_prev.8) # stacked_lstm_v2.py:68:24
          %101 : Tensor[] = aten::append(%output_t.1, %h.3) # stacked_lstm_v2.py:69:20
          -> (%9)
      %104 : Tensor[][] = aten::append(%output_j.1, %output_t.1) # stacked_lstm_v2.py:70:16
      %output_t.6 : Tensor[] = prim::ListConstruct()
      %108 : Tensor[] = aten::__getitem__(%output_j.1, %25) # stacked_lstm_v2.py:61:20
      %x.11 : Tensor = aten::__getitem__(%108, %16) # stacked_lstm_v2.py:61:20
      %111 : Tensor = prim::GetAttr[name="init_state"](%self)
      %h_prev.11 : Tensor = prim::CallMethod[name="forward"](%59, %x.11, %111) # stacked_lstm_v2.py:62:25
      %115 : Tensor[] = aten::append(%output_t.6, %h_prev.11) # stacked_lstm_v2.py:63:16
      %118 : int = aten::__getitem__(%lens.1, %i.1) # stacked_lstm_v2.py:65:34
      %119 : int = aten::__range_length(%25, %118, %25) # stacked_lstm_v2.py:65:16
       = prim::Loop(%119, %9) # stacked_lstm_v2.py:65:16
        block0(%121 : int):
          %t.7 : int = aten::__derive_index(%121, %25, %25) # stacked_lstm_v2.py:65:16
          %278 : int = prim::Constant[value=0]()
          %126 : Tensor[] = aten::__getitem__(%output_j.1, %278) # stacked_lstm_v2.py:66:24
          %x.13 : Tensor = aten::__getitem__(%126, %t.7) # stacked_lstm_v2.py:66:24
          %132 : int = aten::sub(%t.7, %25) # stacked_lstm_v2.py:67:38
          %h_prev.13 : Tensor = aten::__getitem__(%output_t.6, %132) # stacked_lstm_v2.py:67:29
          %h.5 : Tensor = prim::CallMethod[name="forward"](%59, %x.13, %h_prev.13) # stacked_lstm_v2.py:68:24
          %140 : Tensor[] = aten::append(%output_t.6, %h.5) # stacked_lstm_v2.py:69:20
          -> (%9)
      %143 : Tensor[][] = aten::append(%output_j.1, %output_t.6) # stacked_lstm_v2.py:70:16
      %output_t.11 : Tensor[] = prim::ListConstruct()
      %148 : Tensor[] = aten::__getitem__(%output_j.1, %144) # stacked_lstm_v2.py:61:20
      %x.16 : Tensor = aten::__getitem__(%148, %16) # stacked_lstm_v2.py:61:20
      %151 : Tensor = prim::GetAttr[name="init_state"](%self)
      %h_prev.16 : Tensor = prim::CallMethod[name="forward"](%61, %x.16, %151) # stacked_lstm_v2.py:62:25
      %155 : Tensor[] = aten::append(%output_t.11, %h_prev.16) # stacked_lstm_v2.py:63:16
      %158 : int = aten::__getitem__(%lens.1, %i.1) # stacked_lstm_v2.py:65:34
      %159 : int = aten::__range_length(%25, %158, %25) # stacked_lstm_v2.py:65:16
       = prim::Loop(%159, %9) # stacked_lstm_v2.py:65:16
        block0(%161 : int):
          %t.10 : int = aten::__derive_index(%161, %25, %25) # stacked_lstm_v2.py:65:16
          %279 : int = prim::Constant[value=1]()
          %166 : Tensor[] = aten::__getitem__(%output_j.1, %279) # stacked_lstm_v2.py:66:24
          %x.18 : Tensor = aten::__getitem__(%166, %t.10) # stacked_lstm_v2.py:66:24
          %172 : int = aten::sub(%t.10, %25) # stacked_lstm_v2.py:67:38
          %h_prev.18 : Tensor = aten::__getitem__(%output_t.11, %172) # stacked_lstm_v2.py:67:29
          %h.7 : Tensor = prim::CallMethod[name="forward"](%61, %x.18, %h_prev.18) # stacked_lstm_v2.py:68:24
          %180 : Tensor[] = aten::append(%output_t.11, %h.7) # stacked_lstm_v2.py:69:20
          -> (%9)
      %183 : Tensor[][] = aten::append(%output_j.1, %output_t.11) # stacked_lstm_v2.py:70:16
      %output_t.16 : Tensor[] = prim::ListConstruct()
      %188 : Tensor[] = aten::__getitem__(%output_j.1, %184) # stacked_lstm_v2.py:61:20
      %x.21 : Tensor = aten::__getitem__(%188, %16) # stacked_lstm_v2.py:61:20
      %191 : Tensor = prim::GetAttr[name="init_state"](%self)
      %h_prev.21 : Tensor = prim::CallMethod[name="forward"](%63, %x.21, %191) # stacked_lstm_v2.py:62:25
      %195 : Tensor[] = aten::append(%output_t.16, %h_prev.21) # stacked_lstm_v2.py:63:16
      %198 : int = aten::__getitem__(%lens.1, %i.1) # stacked_lstm_v2.py:65:34
      %199 : int = aten::__range_length(%25, %198, %25) # stacked_lstm_v2.py:65:16
       = prim::Loop(%199, %9) # stacked_lstm_v2.py:65:16
        block0(%201 : int):
          %t.13 : int = aten::__derive_index(%201, %25, %25) # stacked_lstm_v2.py:65:16
          %280 : int = prim::Constant[value=2]()
          %206 : Tensor[] = aten::__getitem__(%output_j.1, %280) # stacked_lstm_v2.py:66:24
          %x.23 : Tensor = aten::__getitem__(%206, %t.13) # stacked_lstm_v2.py:66:24
          %212 : int = aten::sub(%t.13, %25) # stacked_lstm_v2.py:67:38
          %h_prev.23 : Tensor = aten::__getitem__(%output_t.16, %212) # stacked_lstm_v2.py:67:29
          %h.9 : Tensor = prim::CallMethod[name="forward"](%63, %x.23, %h_prev.23) # stacked_lstm_v2.py:68:24
          %220 : Tensor[] = aten::append(%output_t.16, %h.9) # stacked_lstm_v2.py:69:20
          -> (%9)
      %223 : Tensor[][] = aten::append(%output_j.1, %output_t.16) # stacked_lstm_v2.py:70:16
      %226 : Tensor[][][] = aten::append(%output_i.1, %output_j.1) # stacked_lstm_v2.py:71:12
      -> (%9)
  return (%output_i.1)


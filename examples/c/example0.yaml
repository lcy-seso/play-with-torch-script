start: 285
end: 617
indent: '  '
context: '[seq_len] -> {  : -2147483648 <= seq_len <= 2147483646 }'
schedule: '{ domain: "[seq_len] -> { S_0[i] : 0 < i <= seq_len; S_1[i] : 0 < i <=
  seq_len; S_2[i] : 0 < i <= seq_len }", child: { sequence: [ { filter: "[seq_len]
  -> { S_0[i] }", child: { schedule: "[seq_len] -> L_0[{ S_0[i] -> [(i)] }]" } },
  { filter: "[seq_len] -> { S_1[i] }", child: { schedule: "[seq_len] -> L_1[{ S_1[i]
  -> [(-i)] }]" } }, { filter: "[seq_len] -> { S_2[i] }", child: { schedule: "[seq_len]
  -> L_2[{ S_2[i] -> [(i)] }]" } } ] } }'
arrays:
- context: '{  :  }'
  extent: '[seq_len] -> { input[i0] : i0 >= 0 }'
  element_type: const float
  element_size: 4
- context: '{  :  }'
  extent: '[seq_len] -> { output[i0] : i0 >= 0 }'
  element_type: float
  element_size: 4
- context: '{  :  }'
  extent: '[seq_len] -> { output1[i0] : i0 >= 0 }'
  element_type: float
  element_size: 4
- context: '{  :  }'
  extent: '[seq_len] -> { output2[i0] : i0 >= 0 }'
  element_type: float
  element_size: 4
statements:
- line: 13
  domain: '[seq_len] -> { S_0[i] : 0 < i <= seq_len }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[seq_len] -> { S_0[i] -> output1[(i)] }'
        reference: __pet_ref_0
        read: 0
        write: 1
      - type: call
        name: cell
        arguments:
        - type: access
          index: '[seq_len] -> { S_0[i] -> input[(-1 + i)] }'
          reference: __pet_ref_1
          read: 1
          write: 0
        - type: access
          index: '[seq_len] -> { S_0[i] -> output1[(-1 + i)] }'
          reference: __pet_ref_2
          read: 1
          write: 0
- line: 17
  domain: '[seq_len] -> { S_1[i] : 0 < i <= seq_len }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[seq_len] -> { S_1[i] -> output2[(i)] }'
        reference: __pet_ref_3
        read: 0
        write: 1
      - type: call
        name: cell
        arguments:
        - type: access
          index: '[seq_len] -> { S_1[i] -> input[(-1 + i)] }'
          reference: __pet_ref_4
          read: 1
          write: 0
        - type: access
          index: '[seq_len] -> { S_1[i] -> output2[(1 + i)] }'
          reference: __pet_ref_5
          read: 1
          write: 0
- line: 21
  domain: '[seq_len] -> { S_2[i] : 0 < i <= seq_len }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[seq_len] -> { S_2[i] -> output[(i)] }'
        reference: __pet_ref_6
        read: 0
        write: 1
      - type: op
        operation: +
        arguments:
        - type: access
          index: '[seq_len] -> { S_2[i] -> output1[(i)] }'
          reference: __pet_ref_7
          read: 1
          write: 0
        - type: access
          index: '[seq_len] -> { S_2[i] -> output2[(i)] }'
          reference: __pet_ref_8
          read: 1
          write: 0
